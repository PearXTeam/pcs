<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAALAAAAFAAA
        ABoAAAAfAAAAHwAAABoAAAAUAAAACwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAJAEA
        AC4nDgRCSRwIX1UhCXJUIQlxSBwIXCQNBEEBAAAuAAAAJAAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAwEAKEQa
        CF9iKA2TdjMU2387GvWMRyL4l1An+ZtUKvmWUCb3i0Yh8IE+G9BnLRGKQBkIWAIBACgAAAAPAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECkQ
        BT9eJAuUdjQU4odDIPqlXC39u2ov/slzMv/RejX/1383/9qAOP/ZgTr+ynk8/K5mNvaQSyTXXCMKhiMN
        BDoAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoE
        ARc/GAdVcjAS2IZCH/ynXCz/wWwu/8tyLv/Qdi//13sx/9x/Mv/jgzT/6Yc1/++MN//1kDj/95Q8/+WN
        RP+5bzv4hkIexzoWBk4IAwEXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAJRBoHWHEwEdSMSCP9rF8r/r9pKv/EbSv/y3It/9B2Lv/XejD/3H4x/+ODM//ohzT/74w2//SQ
        N//7lTn//pc6//GUQv7Mf0T6hkMewz8YB1EAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AP//wAH///gD////B////w////8f////P/8=
</value>
  </data>
</root>